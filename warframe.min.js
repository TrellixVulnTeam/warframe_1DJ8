let worldUrl;
let oldMissionApiUrl;
let debug = false;
let draggabilly;
let allowNotice;
let oldMissionPages = 1;
let oldMission;
let worldState;
let updateTime;
let cetusIsDay;
let cetusCurrentTitle;
let cetusCurrentTitleTimezone;
let cetusCurrentIndicator;
let cetusCurrentIndicatorColor;
let earthIsDay;
let earthCurrentTitle;
let earthCurrentTitleTimezone;
let earthCurrentIndicator;
let earthCurrentIndicatorColor;
$(document).ready(function () {
    $('#eventTitle').text('等待拉取数据');
    $(`body`).tooltip({
        selector: `[data-toggle="tooltip"]`
    });
    urlInit();
    update();
    warframeJSInfo();
    getOldMissionJson();
    updateTimeBadges();
    updateProgress();
    updateResetTime();
    if (Cookies.get(`noticeDiv`) == `true`) {
        console.log("公告已读.");
        $("#component-notice").hide();
    }
    allowNotice = Cookies.get(`allowNotice`);
    if (allowNotice == `` || allowNotice == undefined) {
        allowNotice = 'false';
        Cookies.set(`allowNotice`, allowNotice, {
            expires: 365
        });
    }
    var platform = Cookies.get(`platform`);
    if (platform == `` || platform == undefined) {
        platform = `ZHCN`;
        Cookies.set(`platform`, platform, {
            expires: 365
        });
    }
});

function warframeJSInfo() {
    console.log(`null00.com warframe JS\r\n\ 国服ID | 贴吧昵称:-明非-\r\n\ 国际服ID:-MingFei-\r\n\ GitHub:XXFT\r\n\r\n\ 邮箱:mingfei-tenno@foxmail.com`);
}

function update() {
    getWorldState();
    setTimeout(update, 30000);
}

function urlInit() {
    var platform = Cookies.get(`platform`);
    if (platform == `` || platform == undefined) {
        platform = `ZHCN`;
    }
    if (debug) {
        worldUrl = `http://localhost:8080/api/world/` + platform;
    } else {
        worldUrl = `https://api.null00.com/world/` + platform;
    }
    oldMissionApiUrl = worldUrl + '/oldMission';
}

function getWorldState() {
    $.getJSON(worldUrl, data => {
        worldState = JSON.parse(JSON.stringify(data));
        updateTime = (new Date()).getTime();
        updatePage();
    });
}

function updatePage() {
    if (worldState) {
        updateHotfix();
        updateEvents();
        updateSortie();
        updateNews();
        updateCetusBountyTimer();
        updateBounties();
        updateFissure();
        updateVoidTrader();
        updateVoidTraderInventory();
        updateDarvoDeals();
        updateInvasions();
        updateAlerts();
        updateDataDependencies();
        updateEarthCycle();
        updateCetusCycle();
        updateWorldStateTime();
        updateGrid();
    }
}

function updateDataDependencies() {
    cetusIsDay = worldState.cetus.day;
    earthIsDay = worldState.earth.day;
}

function updateWorldStateTime() {
    if (document.getElementById(`worldstateinfo`)) {
        document.getElementById(`worldstateinfo`).setAttribute(`data-original-title`, `${    Cookies.get(`
            platform `)} 世界数据更新于 ${moment(updateTime).format(`
            MMMM Do YYYY, h: mm: ss a `)}`);
    }
}

function updateHotfix() {
    mesgNotice(`网站即将热修`, `指挥官,我正在执行网站更新补丁,请不要刷新页面.`);
}

function updateEvents() {
    const {
        events
    } = worldState;
    if (events.length == 0) {
        $(`#component-event`).hide();
        return;
    }
    let tagHtml;
    for (const event of events) {
        if (tagHtml !== undefined) {
            tagHtml += `</br>` + event.tag;
        } else {
            tagHtml = event.tag;
        } if ($(`#event_${event.oid}`).length <= 0) {
            let progressHtml;
            let currentTime = moment().unix();
            let currentProgress = 100 - (event.expiry - currentTime) / (event.expiry - event.activation) * 100;
            currentProgress = Math.round(currentProgress * 100) / 100;
            progressHtml = `<li id="event_${event.oid}" class="eventUl">`;
            if (event.healthPct !== null) {
                progressHtml += `<span id="event_oid_ProgressDes">(${event.tag}) - ${event.healthPct}%</br>${event.node}</span>`;
                progressHtml += `<span class="progress eventProgress">`;
                progressHtml += `<div id="event_oid_Progress" class="progress-bar eventProgress" role="progressbar" style="width: ${event.healthPct}%;"></div>`;
                progressHtml += `</span>`;
                if (currentProgress != 'Infinity') {
                    progressHtml += `<span id="event_oid_ProgressDes">(${event.tag})距离结束时间 - ${currentProgress}%</span>`;
                    progressHtml += `<span class="progress eventProgress">`;
                    progressHtml += `<div id="event_oid_Progress" class="progress-bar cycleProgress eventProgress" role="progressbar" style="width: 3%;" data-starttime="${event.activation}" data-endtime="${event.expiry}"></div>`;
                    progressHtml += `</span>`;
                }
                progressHtml += `</li>`;
            } else {
                progressHtml += `<span id="event_oid_ProgressDes">(${event.tag})距离结束时间 - ${currentProgress}%</span>`;
                progressHtml += `<span class="progress eventProgress">`;
                progressHtml += `<div id="event_oid_Progress" class="progress-bar cycleProgress eventProgress" role="progressbar" style="width: 3%;" data-starttime="${event.activation}" data-endtime="${event.expiry}"></div>`;
                progressHtml += `</span>`;
                progressHtml += `</li>`;
            }
            $("#eventInfo").after(`${progressHtml}`);
        }
    }
    $(`#eventTitle`).html(tagHtml);
}

function getbadgeColor(faction) {
    switch (faction) {
    case `科普斯商会`:
        return `badge-info`;
    case `克隆尼帝国`:
        return `badge-danger`;
    case `疫变感染体`:
        return `badge-success`;
    case `堕落者`:
        return `badge-warning`;
    case `CORPUS`:
        return `badge-info`;
    case `GRINEER`:
        return `badge-danger`;
    case `INFESTATION`:
        return `badge-success`;
    case `CORRUPTED`:
        return `badge-warning`;
    default:
        return `badge-default`;
    }
}

function getProgressBarColor(faction) {
    switch (faction) {
    case `科普斯商会`:
        return `corpus-invasio`;
    case `克隆尼帝国`:
        return `grineer-invasion`;
    case `疫变感染体`:
        return `infested-invasion`;
    case `堕落者`:
        return `corrupted-invasion`;
    case `CORPUS`:
        return `corpus-invasion`;
    case `GRINEER`:
        return `grineer-invasion`;
    case `INFESTATION`:
        return `infested-invasion`;
    case `CORRUPTED`:
        return `corrupted-invasion`;
    default:
        return `default-invasion`;
    }
}

function updateInvasions() {
    const {
        invasions
    } = worldState;
    let numInvasions = 0;
    if (invasions.length !== 0) {
        document.getElementById(`invasiontitle`).innerText = `奖励虽好切莫贪杯.`;
        if (document.getElementById(`invasionList`)) {
            $(`#invasionList`).children().not(`#invasionbody`).remove();
        }
        invasions.forEach(invasion => {
            if ($(`#${invasion.oid}`).length !== 0) {
                if (invasion.completed) {
                    $(`#${invasion.oid}`).remove();
                } else {
                    $(`#${invasion.oid}_info`).html(`<b>${invasion.node}</b><br>对阵`);
                    const attackPercent = Math.floor(((invasion.count + invasion.requiredRuns) / (invasion.requiredRuns * 2)) * 100);
                    const defendPercent = 100 - attackPercent;
                    const attackBar = $(`#${invasion.oid}_progress`).children()[0];
                    const defendBar = $(`#${invasion.oid}_progress`).children()[1];
                    if (invasion.count > 0) {
                        $(attackBar).addClass(`winning-right`);
                        $(defendBar).removeClass(`winning-left`);
                    } else {
                        $(attackBar).removeClass(`winning-right`);
                        $(defendBar).addClass(`winning-left`);
                    }
                    $(attackBar).css(`width`, `${attackPercent}%`).css(`aria-valuenow`, `${attackPercent}%`);
                    $(defendBar).css(`width`, `${defendPercent}%`).css(`aria-valuenow`, `${defendPercent}%`);
                    numInvasions += 1;
                }
            } else if (!invasion.completed) {
                let invasionRow = `<li class="list-group-item list-group-item-borderless" id="${invasion.oid}" style="padding-top:10px;padding-bottom:0px;">`;
                invasionRow += `<span class="text-center" id="${invasion.oid}_info"><b>${invasion.node}</span>`;
                invasionRow += `<div style="margin-left:5px; margin-right:5px">`;
                let attackerRewardItem = invasion.attacker.rewards;
                if (attackerRewardItem !== 0) {
                    for (const items of attackerRewardItem) {
                        if (items.count == true) {
                            invasionRow += `<span class="badge ${getbadgeColor(invasion.attacker.faction)} pull-left">${items.item} × ${items.itemCount}</span>`;
                        } else {
                            invasionRow += `<span class="badge ${getbadgeColor(invasion.attacker.faction)} pull-left">${items.item}</span>`;
                        }
                    }
                } else {
                    invasionRow += `<span class="col-md-4"></span>`;
                }
                invasionRow += `<span class="col-md-4"></span>`;
                let defenderRewardItem = invasion.defender.rewards;
                if (defenderRewardItem !== 0) {
                    for (const items of defenderRewardItem) {
                        if (items.count == true) {
                            invasionRow += `<span class="badge ${getbadgeColor(invasion.defender.faction)} pull-right">${items.item} × ${items.itemCount}</span>`;
                        } else {
                            invasionRow += `<span class="badge ${getbadgeColor(invasion.defender.faction)} pull-right">${items.item}</span>`;
                        }
                    }
                }
                invasionRow += `</div>`;
                invasionRow += `<span style="margin-left:5px; margin-right:5px"><span class="progress" id="${invasion.oid}_progress">`;
                const attackPercent = Math.floor(((invasion.count + invasion.goal) / (invasion.goal * 2)) * 100);
                const defendPercent = 100 - attackPercent;
                let attackWinning = ``;
                let defendWinning = ``;
                if (invasion.count > 0) {
                    attackWinning = `winning-right`;
                } else {
                    defendWinning = `winning-left`;
                }
                invasionRow += `<span class="progress-bar ${getProgressBarColor(invasion.attacker.faction)} attack ${attackWinning}" role="progressbar" style="width: ${attackPercent}%" aria-valuenow="${attackPercent}" aria-valuemin="0" aria-valuemax="100">` + `</span>`;
                invasionRow += `<span class="progress-bar ${getProgressBarColor(invasion.defender.faction)} defend ${defendWinning}" role="progressbar" style="width: ${defendPercent}%" aria-valuenow="${defendPercent}" aria-valuemin="0" aria-valuemax="100">` + `</span>`;
                invasionRow += `</span></div></li>`;
                $(`#invasionbody`).before(invasionRow);
                numInvasions += 1;
            }
        });
        if (numInvasions === 0) {
            document.getElementById(`invasiontitle`).innerText = `暂时没有入侵任务 :(`;
        }
    } else {
        document.getElementById(`invasiontitle`).innerText = `暂时没有入侵任务 :(`;
    }
}
const cleanupDailyDeals = dailyDeals => {
    if (document.getElementsByClassName(`dailyDealsInventory`)) {
        $(`.dailyDealsInventory`).remove();
    } else if ($(`.dailyDealsInventory`).attr(`id`) !== 'dailyDeals_' + dailyDeals[0].expiry) {
        $(`.dailyDealsInventory`).remove();
    }
};

function calculateInventory(total, sold) {
    return `${total - sold}/${total}`;
}

function updateDarvoDeals() {
    const {
        dailyDeals
    } = worldState;
    if (dailyDeals.length !== 0) {
        $(`#darvoTitle`).hide();
        if (document.getElementById('dailyDeals_' + dailyDeals[0].expiry) == undefined) {
            cleanupDailyDeals(dailyDeals);
            const inventoryString = `<table class="table dailyDealsInventory" style="table-layout: fixed" id="dailyDeals_${   dailyDeals[0].expiry}">\n` + `<thead>\n` + `<tr>\n` + `<th class="text-center col-xs-2">物品</th>\n` + `<th class="text-center col-xs-2">折扣</th>\n` + `<th class="text-center col-xs-2">白金</th>\n` + `<th class="text-center col-xs-2">剩余</th>\n` + `<th class="text-center col-xs-4"></th>\n` + `</tr>\n` + `</thead>\n` + `<tbody id="dailyDealsInventory">\n` + `</tbody>\n` + `</table>`;
            $(`#darvobody`).append(inventoryString);
            for (const currentItem of dailyDeals) {
                const itemString = `<tr><td>${currentItem.item}</td><td>${currentItem.discount}%</td><td>${currentItem.salePrice}</td><td>${    calculateInventory(currentItem.total, currentItem.sold)}</td>` + `<td style="padding-right:0;"><span class="badge timer" data-endtime="${currentItem.expiry}"></span></td></tr>`;
                $(`#dailyDealsInventory`).append(itemString);
            }
        }
    } else if (document.getElementsByClassName(`dailyDealsInventory`)) {
        $(`.dailyDealsInventory`).remove();
        document.getElementById(`darvoTitle`).innerText = `当前没有内容 :(`;
        $(`#darvoTitle`).show();
    }
}

function updateNews() {
    let {
        news
    } = worldState;
    if (news.length !== 0) {
        $(`#newsTitle`).hide();
        if (document.getElementById(`newsList`)) {
            $(`#newsList`).children().not(`#newsbody`).not(`#newstop`).remove();
        }
        news.sort((a, b) => {
            const timeA = a.date;
            const timeB = b.date;
            if (timeA < timeB) {
                return 1;
            }
            if (timeA > timeB) {
                return -1;
            }
            return 0;
        });
        for (const article of news) {
            if ($(`#${article.oid}`).length !== 0) {
                $(`#newstime${article.oid}`).html(`[${article.date}] &#9;`);
            } else {
                let articleRow = `<li class="list-group-item list-group-item-borderless" id="${article.oid}" style="padding-top:2px;padding-bottom:2px">`;
                articleRow += `<span id="newstime${article.id}" style="white-space:pre">[${moment(article.date*1000).fromNow()}] &#9;    </span>`;
                articleRow += `<a href="${article.prop}">${article.defaultMessages}</a>`;
                articleRow += `</li>`;
                if (article.priority) {
                    $(`#newstop`).after(articleRow);
                } else {
                    $(`#newsbody`).before(articleRow);
                }
            }
        }
    } else {
        $(`#newsList`).children().not(`#newsbody`).remove();
        document.getElementById(`newsTitle`).innerText = `暂时没有新闻 :(`;
        $(`#newsTitle`).show();
    }
}

function updateVoidTraderInventory() {
    const voidTraderInventory = worldState.voidTrader.manifest;
    if (voidTraderInventory !== null) {
        if (document.getElementById(worldState.voidTrader.oid) === null) {
            if (document.getElementsByClassName(`voidTraderInventory`)) {
                $(`.voidTraderInventory`).remove();
            }
            const inventoryString = `${` < div class = "panel panel-primary voidTraderInventory"
            ` +  `
            style = "margin-left:5%; margin-right:5%"
            ` +  `
            id = "`}${worldState.voidTrader.oid}" > \n < div class = "panel-heading" > \n ` +  ` < h3 class = "panel-title" > ` +  ` < button type = "button"
            class = "btn btn-primary btn-lg btn-block collapsed"
            data - toggle = "collapse"
            aria - expanded = "false"
            data - target = "#voidTraderInventoryPanel" > 虚空商人库存 < span class = "pull-right" > 〇 < /span></button > ` +  ` < /h3>\n` +  `</div > \n ` +  ` < div class = "panel-body collapse text-center"
            id = "voidTraderInventoryPanel" > \n ` +  ` < table class = "table table-striped table-hover " > \n ` +  ` < thead > \n ` +  ` < tr > \n ` +  ` < th class = "text-center" > 物品名 < /th>\n` +  `<th class="text-center">虚空币</th > \n ` +  ` < th class = "text-center" > 星币 < /th>\n` +  `</tr > \n ` +  ` < /thead>\n` +  `<tbody id="voidTraderInventoryContent">\n` +  `</tbody > \n ` +  ` < /table>\n` +  `</div > \n ` +  ` < /div>`;   const elementBody = $(`#voidTraderBody`);  elementBody.append(inventoryString);  elementBody.show();  for (const currentItem of voidTraderInventory) {    const itemString = `<tr><td>${currentItem.itemType}</td > ` +    ` < td > $ {
                currentItem.primePrice
            } < /td><td>${currentItem.regularPrice}</td > < /tr>`;    $(`#voidTraderInventoryContent`).append(itemString);  }   }   $(`#voidTraderInventoryPanel`).on(`shown.bs.collapse`, updateGrid);   $(`#voidTraderInventoryPanel`).on(`hidden.bs.collapse`, updateGrid);    } else if (document.getElementsByClassName(`voidTraderInventory`)) {   $(`.voidTraderInventory`).remove();    }  }   function updateVoidTrader() {    const {voidTrader} = worldState;    if (voidTrader) {   const expiryTime = voidTrader.expiry;   const activateTime = voidTrader.activation;   const currentTime = moment().unix();    $(`#voidTraderProgress`).attr(`data-endtime`, expiryTime);    if (currentTime < activateTime) {  $(`#voidtradertitle`).html(`${voidTrader.character} 预计到达:`);  $(`#voidtradertimezonetitle`).html(`到达在:`);  $(`#voidtradertimezonetime`).html(moment.unix(activateTime).format(`llll`));  $(`#voidtradertimezonenode`).html(`${voidTrader.node}`);   const timeBadge = $(`#voidtradertime`);  timeBadge.attr(`data-endtime`, activateTime);  timeBadge.addClass(`badge timer`);  timeBadge.show();   } else if (currentTime > activateTime && currentTime < expiryTime) {  $(`#voidTraderProgress`).attr(`data-cycleIsDay`, true);  $(`#voidtradertitle`).html(`${voidTrader.character} 滞留时间:`);  $(`#voidtradertimezonetitle`).html(`离开在:`);  $(`#voidtradertimezonetime`).html(moment.unix(expiryTime).format(`llll`));  $(`#voidtradertimezonenode`).html(`${voidTrader.node}`);   const timeBadge = $(`#voidtradertime`);  timeBadge.attr(`data-endtime`, expiryTime);  timeBadge.addClass(`badge timer`);  timeBadge.show();   } else {  $(`#voidtradertitle`).html(`虚空商人已过期,请等待刷新...`);  $(`#voidtradertimezonetitle`).html(``);  $(`#voidtradertimezonetime`).html(``);  $(`#voidtradertimezonenode`).html(``);  const timeBadge = $(`#voidtradertime`);  timeBadge.removeClass(`badge timer`);  timeBadge.hide();   }   $(`#voidTraderProgress`).attr(`data-cycleIsDay`, false);    } else {   $(`#voidtradertitle`).html(`暂时没有虚空商人,请等待刷新...`);   $(`#voidtradertimezonetitle`).html(``);   $(`#voidtradertimezonetime`).html(``);    const timeBadge = $(`#voidtradertime`);   timeBadge.removeClass(`badge timer`);   timeBadge.hide();    }  }   function updateFissure() {    const {fissures} = worldState;     if (fissures.length !== 0) {   $(`#fissuretitle`).hide();   if (document.getElementById(`fissureList`)) {  $(`#fissureList`).children().not(`#fissurebody`).remove();   }    fissures.sort((a, b) => {  const tierA = a.tierNum;  const tierB = b.tierNum;  if (tierA < tierB) { return -1; }  if (tierA > tierB) { return 1; }  return 0;   });    for (const fissure of fissures) {  if ($(`#${fissure.oid}`).length !== 0) {    const timer = $(`#fissuretimer${fissure.oid}`);    timer.attr(`data-starttime`, moment(fissure.activation).unix());    timer.attr(`data-endtime`, moment(fissure.expiry).unix());  } else {    let fissureRow = `<li class="list-group-item list-group-item-borderless" id="${fissure.oid}">`;     fissureRow += `<span id="fissuretimer${fissure.oid}" class="badge timer pull-right" data-starttime="${fissure.activation}" ` +    `data-endtime="${fissure.expiry}"></span > `;     fissureRow += ` < span class = "fissure-body" > `;    fissureRow += ` < b > $ {
                fissure.node
            } < /b> | ${fissure.missionType} | ${fissure.modifier}</span > `;     fissureRow += ` < /li>`;    $(`#fissurebody`).before(fissureRow);  }   }    } else {   $(`#fissureList`).children().not(`#fissurebody`).remove();   document.getElementById(`fissuretitle`).innerText = `暂时没有裂缝任务 :(`;   $(`#fissuretitle`).show();    }  }   function updateCetusBountyTimer() {    const cetus = worldState.cetus;     const expiryTime = cetus.expiry;    const activateTime = cetus.activation;    const currentTime = moment().unix();     if (currentTime < activateTime) {   $(`#cetusBountyTitle`).html(`新的赏金:`);   const timeBadge = $(`#cetusBountyTime`);   timeBadge.attr(`data-endtime`, activateTime);   timeBadge.addClass(`badge timer`);   timeBadge.show();    } else if (currentTime > activateTime && currentTime < expiryTime) {   $(`#cetusBountyTitle`).html(`赏金过期:`);   const timeBadge = $(`#cetusBountyTime`);   timeBadge.attr(`data-endtime`, expiryTime);   timeBadge.addClass(`badge timer`);   timeBadge.show();    } else {   $(`#cetusBountyTitle`).html(`赏金已过期,请等待刷新...`);   const timeBadge = $(`#cetusBountyTime`);   timeBadge.removeClass(`badge timer`);   timeBadge.hide();    }  }   const cleanupBounties = dailyDeals => {    if (document.getElementsByClassName(`bountiesList`)) {   $(`.bountyListPanelWrapper`).remove();    } else if ($(`.bountiesList`).attr(`id`) !== dailyDeals[0].id) {   $(`.bountyListPanelWrapper`).remove();    }  };   function updateSortie() {    const {sortie} = worldState;     if (sortie.variants.length !== 0) {   $(`#sortietitle`).hide();    if ($(`#sortieList`).children().length === 0) {  $(`#sortieBoss`).html(sortie.boss);  $(`#sortieFaction`).html(sortie.faction);  $(`#sortieList`).empty();  const sortieTimer = `<span id="sortieTimer${sortie.oid}" class="badge timer pull-right" data-starttime="${sortie.activation}" ` +  `data-endtime="${sortie.expiry}"></span > `;  if ($(`#
            sortieTimerInfo `).children()) {    $(`#
            sortieTimerInfo `).children().remove();  }  $(`#
            sortieTimerInfo `).append(sortieTimer);   sortie.variants.forEach((variant, index) => {    let sortieRow = ` < li class = "list-group-item list-group-item-borderless variant"
            id = "variant_${index}" > `;     sortieRow += ` < b > $ {
                variant.missionType
            } < /b> - <b>${variant.node}</b > `;    sortieRow += ` < br / > < span data - toggle = "tooltip"
            data - placement = "right" > $ {
                variant.modifierType
            } < /span></li > `;     $(`#
            sortieList `).append(sortieRow);  });   }    } else {   $(`#
            sortietitle `).show();   $(`#
            sortieList `).find(`#
            sortieList `).empty();   $(`#
            sortieTimer `).remove();    }  }   function updateBounties() { if (worldState.bountys <= 0) {return;} const ostronMissions = worldState.bountys[0];    const jobs = ostronMissions ? ostronMissions.jobs : [];    if (jobs.length !== 0) {   $(`#
            bountyTitle `).hide();   if (document.getElementById(jobs[0].oid) === null) {  cleanupBounties(jobs);   const panelHeading = ` < div class = "panel-heading" > < h3 class = "panel-title" > < button type = "button"
            class = "btn btn-primary btn-lg btn-block collapsed"
            data - toggle = "collapse"
            aria - expanded = "false"
            data - target = "#bountyListPanelBody" > 赛特斯赏金 < span class = "pull-right" > 〇 < /span></button > < /h3></div > `;   const tableHeader = ` < thead > < tr > < th class = "text-center col-xs-4" > 任务 < /th><th class="text-center col-xs-5">奖励</th > < /tr></thead > `;  const tableBody = ` < tbody id = "bountiesList" > < /tbody>`;  const table = `<table class="table bountiesList" style="table-layout: fixed" id="${jobs[0].oid}">${tableHeader}${tableBody}</table > `;   const panelBody = ` < div class = "panel-body collapse"
            id = "bountyListPanelBody" > $ {
                table
            } < /div>`;   let panelWrapper;  panelWrapper = `<div class="panel panel-primary bountyListPanelWrapper" style="margin-left:5%; margin-right:5%" id="${jobs[0].oid}Panel">`;  panelWrapper += panelHeading;  panelWrapper += panelBody;  panelWrapper += `</div > `;   $(`#
            bountybody `).append(panelWrapper);   for (const job of jobs) {    const itemString = ` < tr > < td > $ {
                job.jobType
            } < br > $ {
                job.minEnemyLevel
            } - $ {
                job.maxEnemyLevel
            } < /td>` +    `<td><ul>${itemTolist(job.rewards).map(reward => `<li>${reward}</li > `).join(`
            `)}</ul></td></tr>`;
            $(`#bountiesList`).append(itemString);
        }
        $(`#bountyListPanelBody`).on(`shown.bs.collapse`, updateGrid);
        $(`#bountyListPanelBody`).on(`hidden.bs.collapse`, updateGrid);
        $(`#bountiesList`).append('');
    }
} else if (document.getElementsByClassName(`bountyListPanelWrapper`)) {
    $(`#bountiesList`).removeClass();
    $(`#bountytitle`).text(`当前没有内容 :(`);
    $(`#bountytitle`).show();
}
}

function updateEarthCycle() {
    if (worldState === undefined) {
        return;
    }
    let expiryTime = worldState.earth.earthDate;
    const currentTime = moment().unix();
    if (currentTime > expiryTime) {
        cetusIsDay = !cetusIsDay;
        expiryTime = moment(worldState.earthDate * 1000).add(4, `h`).unix();
    }
    updateEarthTitle();
    $(`#earthProgress`).attr(`data-endtime`, expiryTime);
    const earthTimeDayEmoji = $(`#earthTimeDayEmoji`);
    const earthTimeNightEmoji = $(`#earthTimeNightEmoji`);
    if (earthIsDay) {
        earthTimeDayEmoji.removeClass(`pull-right`);
        earthTimeDayEmoji.addClass(`pull-left`);
        earthTimeNightEmoji.removeClass(`pull-left`);
        earthTimeNightEmoji.addClass(`pull-right`);
    } else {
        earthTimeDayEmoji.removeClass(`pull-left`);
        earthTimeDayEmoji.addClass(`pull-right`);
        earthTimeNightEmoji.removeClass(`pull-right`);
        earthTimeNightEmoji.addClass(`pull-left`);
    }
    const cycleIndicator = $(`#earthCycleIndicator`);
    cycleIndicator.html(earthCurrentIndicator);
    if (!cycleIndicator.hasClass(earthCurrentIndicatorColor)) {
        cycleIndicator.attr(`class`, earthCurrentIndicatorColor);
        cycleIndicator.addClass(`pull-right`);
    }
    $(`#earthCycleTitle`).html(earthCurrentTitle);
    $(`#earthTimeZoneTitle`).html(earthCurrentTitleTimezone);
    $(`#earthTimeZoneTime`).html(moment.unix(expiryTime).format(`llll`));
    const timeBadge = $(`#earthCycleTime`);
    timeBadge.attr(`data-endtime`, expiryTime);
    timeBadge.addClass(`badge timer`);
}

function updateEarthTitle() {
    if (!earthIsDay) {
        earthCurrentIndicator = `🌙夜晚`;
        earthCurrentIndicatorColor = `darkblue`;
        earthCurrentTitle = `夜晚剩余: `;
        earthCurrentTitleTimezone = `到白天: `;
    } else {
        earthCurrentIndicator = `🔆白天`;
        earthCurrentIndicatorColor = `orange`;
        earthCurrentTitle = `白天剩余: `;
        earthCurrentTitleTimezone = `到晚上: `;
    }
}

function updateCetusCycle() {
    let expiryTime = worldState.cetus.cetusTime;
    const currentTime = moment().unix();
    if (currentTime > expiryTime) {
        cetusIsDay = !cetusIsDay;
        if (cetusIsDay) {
            mesgNotice(`赛特斯已日出`, `指挥官,新的一天又来了!`);
            expiryTime = moment(worldState.cetus.cetusTime * 1000).add(100, `m`).unix();
        } else {
            mesgNotice(`赛特斯已落幕`, `指挥官,夜幕已经降临.`);
            expiryTime = moment(worldState.cetus.cetusTime * 1000).add(50, `m`).unix();
        }
    }
    updateCetusTitle();
    $(`#cetusProgress`).attr(`data-endtime`, expiryTime);
    if (cetusIsDay) {
        $(`#cetusProgress`).attr(`data-cycleIsDay`, true);
    } else {
        $(`#cetusProgress`).attr(`data-cycleIsDay`, false);
    }
    const cetusTimeDayEmoji = $(`#cetusTimeDayEmoji`);
    const cetusTimeNightEmoji = $(`#cetusTimeNightEmoji`);
    if (cetusIsDay) {
        cetusTimeDayEmoji.removeClass(`pull-right`);
        cetusTimeDayEmoji.addClass(`pull-left`);
        cetusTimeNightEmoji.removeClass(`pull-left`);
        cetusTimeNightEmoji.addClass(`pull-right`);
    } else {
        cetusTimeDayEmoji.removeClass(`pull-left`);
        cetusTimeDayEmoji.addClass(`pull-right`);
        cetusTimeNightEmoji.removeClass(`pull-right`);
        cetusTimeNightEmoji.addClass(`pull-left`);
    }
    const cycleIndicator = $(`#cetusCycleIndicator`);
    cycleIndicator.html(cetusCurrentIndicator);
    if (!cycleIndicator.hasClass(cetusCurrentIndicatorColor)) {
        cycleIndicator.attr(`class`, cetusCurrentIndicatorColor);
        cycleIndicator.addClass(`pull-right`);
    }
    $(`#cetusCycleTitle`).html(cetusCurrentTitle);
    $(`#cetusTimeZoneTitle`).html(cetusCurrentTitleTimezone);
    $(`#cetusTimeZoneTime`).html(moment.unix(expiryTime).format(`llll`));
    const timeBadge = $("#cetusCycleTime");
    timeBadge.attr(`data-endtime`, expiryTime);
    timeBadge.addClass(`badge timer`);
}

function updateCetusTitle() {
    if (!cetusIsDay) {
        cetusCurrentIndicator = `🌙夜晚`;
        cetusCurrentIndicatorColor = `darkblue`;
        cetusCurrentTitle = `晚上剩余: `;
        cetusCurrentTitleTimezone = `到白天: `;
    } else {
        cetusCurrentIndicator = `🔆白天`;
        cetusCurrentIndicatorColor = `orange`;
        cetusCurrentTitle = `白天剩余: `;
        cetusCurrentTitleTimezone = `到晚上: `;
    }
}

function updateAlerts() {
    const {
        alerts
    } = worldState;
    if (alerts !== null) {
        if (alerts.length !== 0) {
            $(`#alertTitle`).hide();
            if (document.getElementById(`alertList`).children.length >= 1) {
                for (const alert of alerts) {
                    if ($(`#${alert.oid}`).length === 0) {
                        let alertRow = `<li class="list-group-item list-group-item-borderless" id="${alert.oid}">`;
                        alertRow += `<b>${alert.location}</b>`;
                        alertRow += `<span id="alerttimer${alert.oid}" class="badge timer pull-right" data-starttime="${alert.activation}" ` + `data-endtime="${alert.expiry}"></span>`;
                        let itemsList = alert.rewards;
                        if (itemsList !== 0) {
                            for (const items of itemsList) {
                                if (items.count == true) {
                                    alertRow += `<span class="badge badge-info pull-right" style="margin-right: 5px">${items.item} × ${items.itemCount}</span>`;
                                } else {
                                    alertRow += `<span class="badge badge-info pull-right" style="margin-right: 5px">${items.item}</span>`;
                                }
                            }
                        }
                        alertRow += `<br><div style="margin-top:2px"><b>${alert.missionType}</b> (${alert.faction})` + ` | <b>等级: </b>${alert.minEnemyLevel}-${alert.maxEnemyLevel}` + ` | ${alert.credits} 星币`;
                        alertRow += `</li>`;
                        $(`#alertbody`).before(alertRow);
                    } else {
                        const timer = $(`#alerttimer${alert.oid}`);
                        timer.attr(`data-starttime`, alert.activation);
                        timer.attr(`data-endtime`, alert.expiry);
                    }
                }
            } else {
                for (const alert of alerts) {
                    let alertRow = `<li class="list-group-item list-group-item-borderless" id="${alert.oid}">`;
                    alertRow += `<b>${alert.location}</b> | ${alert.missionType} (${alert.faction})`;
                    alertRow += `<span id="alerttimer${alert.oid}" class="badge timer pull-right" data-starttime="${alert.activation}" ` + `data-endtime="${alert.expiry}"></span></li>`;
                    $(`#alertbody`).before(alertRow);
                }
            }
            return;
        }
    }
    if (document.getElementById(`alertList`)) {
        $(`#alertList`).children().not(`#alertbody`).remove();
        document.getElementById(`alertTitle`).innerText = `目前没有警报 :(`;
        $(`#alertTitle`).show();
    }
}

function updateOldMission() {
    let missionProgress = $("#oldMissionProgress");
    missionProgress.attr(`style`, `width:0%;`);
    missionProgress.hide();
    $(`#oldMissionTitle`).html(`当前第 ${oldMissionPages} 页.`);
    if (oldMission.length !== 0) {
        $('#old_mission_body').html('');
        const inventoryString = `<table class="table" style="table-layout: fixed">\n` + `<thead>\n` + `<tr>\n` + `<th class="text-center col-xs-2">地点</th>\n` + `<th class="text-center col-xs-2">结束</th>\n` + `<th class="text-center col-xs-2">类型</th>\n` + `<th class="text-center col-xs-4">奖励</th>\n` + `</tr>\n` + `</thead>\n` + `<tbody id="OldMissionList">\n` + `</tbody>\n` + `</table>`;
        $(`#old_mission_body`).append(inventoryString);
        for (const missionItem of oldMission) {
            const reward = missionItem.rewards.replace(/#\|#/g, ' VS ');
            let expiry;
            if (missionItem.expiry == 0) {
                expiry = '未记录';
            } else {
                expiry = moment.unix(missionItem.expiry).format(`llll`);
            }
            const itemString = `<tr><td>${missionItem.node}</td><td>${expiry}</td><td>${   missionItem.missionType}<br>${missionItem.enemyLevel}</td><td>${reward}</td></tr>`;
            $(`#OldMissionList`).append(itemString);
        }
    } else {
        oldMissionPages = 1;
        $(`#oldMissionTitle`).html(`刷新失败 :( <br>已为你跳回第一页,点击下一页刷新.`);
    }
}

function getOldMissionJson() {
    $.getJSON(oldMissionApiUrl + '?start=' + oldMissionPages + '&pageSize=6', data => {
        oldMission = JSON.parse(JSON.stringify(data));
        updateOldMission();
    });
}

function itemTolist(item) {
    const segmentation = "<br />";
    let result = new Array();
    if (item.includes(segmentation)) {
        result = item.split(segmentation);
    } else {
        result = new Array(item);
    }
    return result;
}

function mesgNotice(title, text) {
    if (allowNotice != 'true') {
        return;
    }
    if (window.Notification && Notification.permission !== "denied") {
        Notification.requestPermission(function (status) {
            var notice_ = new Notification(title, {
                body: text
            });
            notice_.onclick = function () {
                window.focus();
            }
        });
    }
}

function updateProgress() {
    setTimeout(updateProgress, 5000);
    if (worldState === undefined) {
        return;
    }
    const progressList = document.getElementsByClassName(`cycleProgress`);
    for (progress of progressList) {
        const currentprogress = $(progress);
        const expiry = currentprogress.attr(`data-endtime`);
        const currentTime = moment().unix();
        let start;
        let isDay;
        let nowProgress;
        switch (currentprogress.attr(`data-cycleType`)) {
        case `cetus`:
            isDay = currentprogress.attr(`data-cycleIsDay`);
            if (isDay) {
                nowProgress = 100 - (expiry - currentTime) / 6068 * 100;
            } else {
                nowProgress = 100 - (expiry - currentTime) / 3034 * 100;
            }
            break;
        case `earth`:
            nowProgress = 100 - (expiry - currentTime) / 14400 * 100;
            break;
        case `voidTrader`:
            isDay = currentprogress.attr(`data-cycleIsDay`);
            if (isDay == `true`) {
                nowProgress = 100 - (expiry - currentTime) / 172800 * 100;
            } else {
                nowProgress = 100 - (expiry - currentTime) / 1209600 * 100;
            }
            break;
        default:
            start = currentprogress.attr(`data-starttime`);
            nowProgress = 100 - (expiry - currentTime) / (expiry - start) * 100;
            break;
        }
        currentprogress.attr(`style`, `width: ` + nowProgress + `%;`);
    }
}

function updateTimeBadges() {
    setTimeout(updateTimeBadges, 1000);
    if (worldState === undefined) {
        return;
    }
    const badges = document.getElementsByClassName(`timer`);
    for (const badge of badges) {
        const currentbadge = $(badge);
        const activation = currentbadge.attr(`data-starttime`);
        let diffactivate;
        let durationactivate;
        if (typeof activation !== typeof undefined && activation !== false) {
            diffactivate = moment().diff(moment.unix(currentbadge.attr(`data-starttime`))) * -1;
            durationactivate = moment.duration(diffactivate, `milliseconds`);
        }
        const diff = moment().diff(moment.unix(currentbadge.attr(`data-endtime`))) * -1;
        const duration = moment.duration(diff, `milliseconds`);
        if (typeof diffactivate !== `undefined` && diffactivate > 0) {
            if (!currentbadge.hasClass(`badge-info`)) {
                removeTimeBadgeColor(currentbadge);
            }
            currentbadge.addClass(`badge-info`);
            currentbadge.html(`准备开始: ${formatDurationShort(durationactivate)}`);
        } else if (diff < 0) {
            if (!currentbadge.hasClass(`badge-default`)) {
                removeTimeBadgeColor(currentbadge);
            }
            currentbadge.addClass(`badge-default`);
            currentbadge.html(`过期: ${formatDurationShort(duration)}`);
            switch (currentbadge.attr(`id`)) {
            case `cetusCycleTime`:
                updateCetusCycle();
                break;
            case `earthCycleTime`:
                updateEarthCycle();
                break;
            case `resettimertime`:
                updateResetTime();
                break;
            default:
                if (currentbadge.attr(`id`) && (currentbadge.attr(`id`).includes(`alerttimer`) || currentbadge.attr(`id`).includes(`fissuretimer`))) {
                    currentbadge.parent()[0].remove();
                    updateGrid();
                }
            }
        } else {
            let color;
            if (diff < 600000) {
                color = `badge-danger`;
            } else if (diff < 1800000) {
                color = `badge-warning`;
            } else if (diff > 1800000) {
                color = `badge-success`;
            }
            if (!currentbadge.hasClass(color)) {
                removeTimeBadgeColor(currentbadge);
                currentbadge.addClass(color);
            }
            currentbadge.html(formatTimer(diff));
        }
    }
}

function removeTimeBadgeColor(element) {
    element.removeClass(`badge-success`);
    element.removeClass(`badge-primary`);
    element.removeClass(`badge-danger`);
    element.removeClass(`badge-warning`);
    element.removeClass(`badge-default`);
    element.removeClass(`badge-info`);
}

function formatDurationShort(duration) {
    let timeText = ``;
    if (duration.days()) {
        timeText += `${duration.days()}日 ${duration.hours()}时 ${duration.minutes()}分 ${duration.seconds()}秒`;
    } else if (duration.hours()) {
        timeText += `${duration.hours()}时 ${duration.minutes()}分 ${duration.seconds()}秒`;
    } else if (duration.minutes()) {
        timeText += `${duration.minutes()}分 ${duration.seconds()}秒`;
    } else {
        timeText += `${duration.seconds()}秒`;
    }
    return timeText;
}

function formatTimer(diff) {
    let timeLeft = diff;
    const stringArray = [];
    [
        [86400000, `d`],
        [3600000, `h`],
        [60000, `m`],
        [1000, `s`]
    ].forEach(([unit, suffix]) => {
        const time = Math.floor(timeLeft / unit);
        const first = stringArray.length === 0;
        if (!first || time > 0) {
            stringArray.push(time.toString().padStart(first ? 1 : 2, `0`) + suffix);
        }
        timeLeft -= time * unit;
    });
    return stringArray.join(` `);
}

function updateResetTime() {
    const nextReset = (new Date()).setUTCHours(24, 0, 0, 0) / 1000;
    $(`#resettimertitle`).html(`下一轮时间:`);
    const timeBadge = $(`#resettimertime`);
    timeBadge.attr(`data-endtime`, nextReset);
    timeBadge.addClass(`badge timer`);
}

function playSoundNew() {
    return;
    document.getElementById('soundNew').play();
}[
    [`event`],
    [`cetus`],
    [`earth`],
    [`news`],
    [`bounties`],
    [`alerts`],
    [`notice`],
    [`old_mission`],
    [`invasions`],
    [`sortie`],
    [`fissures`],
    [`baro`],
    [`darvo`]
].forEach(([component, defValue]) => {
    let value = Cookies.get(component);
    if (typeof value === `undefined`) {
        if (typeof defValue === `undefined`) {
            value = `true`;
        } else {
            value = defValue;
        }
        Cookies.set(component, value, {
            expires: 365
        });
    }
    if (value === `true`) {
        $(`.component-check[data-component="${component}"]`).prop(`checked`, true);
    } else {
        $(`#component-${component}`).hide();
    }
});

function cleanPositionsCookie() {
    Cookies.set(`dragPositions`, undefined, {
        expires: 365
    });
    location.reload();
}
$(`#component-selector > ul`).click(e => {
    e.stopPropagation();
});
$(`.component-check`).click(e => {
    const target = $(e.target);
    const status = target.prop(`checked`);
    const component = target.attr(`data-component`);
    const componentElement = $(`#component-${component}`);
    Cookies.set(component, status, {
        expires: 365
    });
    if (status) {
        componentElement.show();
    } else {
        componentElement.hide();
    }
    updateGrid();
});
[
    [`notice`],
    [`draggabilly`]
].forEach(([setname, defValue]) => {
    let value = Cookies.get(setname);
    if (typeof value === `undefined`) {
        if (typeof defValue === `undefined`) {
            value = 'true';
        } else {
            value = defValue;
        }
        Cookies.set(setname, value, {
            expires: 365
        });
    }
    if (value === 'true') {
        $(`.set-check[data-setname="${setname}"]`).prop(`checked`, true);
    }
});
$(`.set-check`).click(e => {
    const target = $(e.target);
    const status = target.prop(`checked`);
    const setname = target.attr(`data-setname`);
    const setElement = $(`#set-${setname}`);
    Cookies.set(setname, status, {
        expires: 365
    });
    if (status) {
        if (setname == 'draggabilly') {
            draggabilly = 'true';
        }
        if (setname == 'notice') {
            allowNotice = 'true';
        }
    } else {
        if (setname == 'draggabilly') {
            draggabilly = 'false';
        }
        if (setname == 'notice') {
            allowNotice = 'false';
        }
    }
});
$(`.platform-picker`).removeClass(`hide`);
$(`#component-selector`).removeClass(`hide`);
(() => {
    Packery.prototype.getShiftPositions = function getShiftPositions() {
        return this.items.map(item => ({
            attr: item.element.getAttribute(`id`),
            x: item.rect.x / this.packer.width,
        }));
    };
    Packery.prototype.initShiftLayout = function initShiftLayout(positions) {
        if (!positions) {
            this.layout();
            return;
        }
        this._resetLayout();
        try {
            this.items = positions.map(itemPosition => {
                const selector = `#${itemPosition.attr}`;
                const itemElem = this.element.querySelector(selector);
                const item = this.getItem(itemElem);
                item.rect.x = itemPosition.x * this.packer.width;
                return item;
            }, this);
            this.shiftLayout();
        } catch (error) {
            this.layout();
        }
    };
    var $grid = $(`.grid`).packery({
        itemSelector: `.grid-item`,
        columnWidth: `.grid-sizer`,
        percentPosition: true,
        initLayout: false,
    });
    const initPositions = Cookies.getJSON(`dragPositions`);
    $grid.packery(`initShiftLayout`, initPositions);
    draggabilly = Cookies.get(`draggabilly`);
    if (draggabilly == `` || draggabilly == undefined) {
        draggabilly = 'true';
        Cookies.set(`draggabilly`, draggabilly, {
            expires: 365
        });
    }
    if (draggabilly == 'true') {
        $grid.find(`.grid-item`).each(function (i, gridItem) {
            var draggie = new Draggabilly(gridItem, {
                handle: `h3`
            });
            $grid.packery(`bindDraggabillyEvents`, draggie);
        });
    }
    $grid.on(`dragItemPositioned`, () => {
        const positions = $grid.packery(`getShiftPositions`);
        Cookies.set(`dragPositions`, positions, {
            expires: 365
        });
    });
    this.updateGrid = () => {
        $grid.packery();
    };
})();
$(document).ready(function () {
    $("#cleanPositions").click(function () {
        cleanPositionsCookie();
    });
    $("#noticeClose").click(function () {
        Cookies.set(`noticeDiv`, `true`, {
            expires: 365
        });
        $("#component-notice").hide();
    });
    $("#oldMissionNext").click(function () {
        oldMissionPages++;
        let missionProgress = $("#oldMissionProgress");
        missionProgress.attr(`style`, `width:80%;`);
        missionProgress.show();
        getOldMissionJson();
    });
    $("#oldMissionPrevious").click(function () {
        oldMissionPages--;
        if (oldMissionPages < 1) {
            oldMissionPages = 1
        }
        let missionProgress = $("#oldMissionProgress");
        missionProgress.attr(`style`, `width:80%;`);
        missionProgress.show();
        getOldMissionJson();
    });
});